{"ast":null,"code":"function getCookie(name) {\n  let cookieValue = \"\";\n\n  if (document.cookie && document.cookie !== \"\") {\n    const cookies = document.cookie.split(\";\");\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nclass APIUsers {\n  static async login(data) {\n    const csrfToken = getCookie(\"csrftoken\");\n    const response = await fetch(\"/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrfToken\n      },\n      body: JSON.stringify(data)\n    });\n    return response;\n  }\n\n}\n\nclass APICitas {\n  static async createCita(data) {\n    const csrfToken = getCookie(\"csrftoken\");\n    const response = await fetch(\"/citas/createCita\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrfToken\n      },\n      body: JSON.stringify(data)\n    });\n    const json = await response.json();\n    return [json, response];\n  }\n\n  static async getDates(setDates, setHasLoaded) {\n    const response = await fetch(\"/citas/getDates\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json();\n    setDates(json);\n    setHasLoaded(true);\n  }\n\n  static async getDates2(setDates, setHasLoaded) {\n    const response = await fetch(\"/citas/getDates\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json(); // setDates(json);\n    // setHasLoaded(true);\n\n    return json;\n  }\n\n  static async updateCita(data) {\n    const csrfToken = getCookie(\"csrftoken\");\n    const response = await fetch(\"/citas/updateCita\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": csrfToken\n      },\n      body: JSON.stringify(data)\n    });\n    const json = await response.json();\n    return [json, response];\n  }\n\n  static async deleteCita(data) {\n    console.log(\"ready to blabla\");\n    console.log(data);\n    const csrfToken = getCookie(\"csrftoken\");\n    const response = await fetch(\"/citas/deleteAppointment\", {\n      method: \"DELETE\",\n      headers: {\n        \"X-CSRFToken\": csrfToken\n      },\n      body: JSON.stringify(data)\n    });\n    console.log(response); // const json = await response.json();\n    // return [json, response];\n  }\n\n}\n\nexport { APIUsers, APICitas };","map":{"version":3,"sources":["C:/Users/ederivc/Documents/PuppyVeterinarySystem/frontend/src/api/api.jsx"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","APIUsers","login","data","csrfToken","response","fetch","method","headers","body","JSON","stringify","APICitas","createCita","json","getDates","setDates","setHasLoaded","getDates2","updateCita","deleteCita","console","log"],"mappings":"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","sourcesContent":["function getCookie(name) {\r\n  let cookieValue = \"\";\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\");\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nclass APIUsers {\r\n  static async login(data) {\r\n    const csrfToken = getCookie(\"csrftoken\");\r\n    const response = await fetch(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response;\r\n  }\r\n}\r\n\r\nclass APICitas {\r\n  static async createCita(data) {\r\n    const csrfToken = getCookie(\"csrftoken\");\r\n    const response = await fetch(\"/citas/createCita\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    const json = await response.json();\r\n    return [json, response];\r\n  }\r\n\r\n  static async getDates(setDates, setHasLoaded) {\r\n    const response = await fetch(\"/citas/getDates\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    setDates(json);\r\n    setHasLoaded(true);\r\n  }\r\n\r\n  static async getDates2(setDates, setHasLoaded) {\r\n    const response = await fetch(\"/citas/getDates\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    // setDates(json);\r\n    // setHasLoaded(true);\r\n    return json;\r\n  }\r\n\r\n  static async updateCita(data) {\r\n    const csrfToken = getCookie(\"csrftoken\");\r\n    const response = await fetch(\"/citas/updateCita\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    const json = await response.json();\r\n    return [json, response];\r\n  }\r\n\r\n  static async deleteCita(data) {\r\n    console.log(\"ready to blabla\");\r\n    console.log(data);\r\n    const csrfToken = getCookie(\"csrftoken\");\r\n    const response = await fetch(\"/citas/deleteAppointment\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    console.log(response);\r\n    // const json = await response.json();\r\n    // return [json, response];\r\n  }\r\n}\r\n\r\nexport { APIUsers, APICitas };\r\n"]},"metadata":{},"sourceType":"module"}